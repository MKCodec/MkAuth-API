<?php

class estoque {

	public function parametros($valor) {
		parse_str($valor, $saida);
		$pagina = isset($saida['pagina']) ? intval($saida['pagina']) : 1;
		$limite = isset($saida['limite']) ? intval($saida['limite']) : 500;
		$PaginaP = ($pagina == 0 ) ? 1 : $pagina;
		$padrao = ($PaginaP - 1) * $limite;
		return array('pagina' => $PaginaP, 'limite' => $limite, 'padrao' => $padrao);
	}

	public function get_listagem() {

		$comandoSQL = 'SELECT uuid_produto AS uuid, sis_produto.id, sis_estoque.estoque, nome, grupo, ativo
		FROM sis_produto
		LEFT JOIN sis_estoque ON sis_produto.id = sis_estoque.idprod';

		$rotinaSQL = DB::prepare($comandoSQL);
		$rotinaSQL -> execute();
		$resultadosSQL = $rotinaSQL -> fetchAll();
		$numeroDeLinhas = $rotinaSQL -> rowCount();

		echo json_encode(array('produtos' => $resultadosSQL));
	}

	public function get_listar($valor) {
		$parametros = $this->parametros($valor);

		$countSQL = 'SELECT COUNT(*) AS total FROM sis_produto';
		$rotinaCount = DB::prepare($countSQL);
		$rotinaCount -> execute();
		$resultadosCount = $rotinaCount -> fetch();
		$total = intval($resultadosCount->total);
		$totalPaginas = ceil($total / $parametros['limite']);

		$comandoSQL = 'SELECT uuid_produto AS uuid, sis_produto.id, sis_estoque.estoque, nome, grupo, ativo
		FROM sis_produto
		LEFT JOIN sis_estoque ON sis_produto.id = sis_estoque.idprod
		ORDER BY id LIMIT :padrao, :limite';

		$rotinaSQL = DB::prepare($comandoSQL);
		$rotinaSQL -> bindParam('padrao', $parametros['padrao'], PDO::PARAM_INT);
		$rotinaSQL -> bindParam('limite', $parametros['limite'], PDO::PARAM_INT);
		$rotinaSQL -> execute();
		$resultadosSQL = $rotinaSQL -> fetchAll();
		$numeroDeLinhas = $rotinaSQL -> rowCount();

		$ConsultaLimite = ($parametros['pagina'] == $totalPaginas) ? $numeroDeLinhas : $parametros['limite'];

		if ($parametros['padrao'] >= $total) {
			echo json_encode(array('mensagem' => 'Pagina atual acima do limite de paginas'));
		} else {
			echo json_encode(array('total_registros' => $total , 'consulta_atual' => $ConsultaLimite, 'pagina_atual' => $parametros['pagina'], 'total_paginas' => $totalPaginas, 'produtos' => $resultadosSQL));
		}

	}

	public function get_show($valor) {
		
		$comandoSQL = 'SELECT *
		FROM sis_produto
		LEFT JOIN sis_estoque ON sis_produto.id = sis_estoque.idprod
		WHERE uuid_produto = :uuid';

		$rotinaSQL = DB::prepare($comandoSQL);
		$rotinaSQL -> bindParam('uuid', $valor);
		$rotinaSQL -> execute();
		$resultadosSQL = $rotinaSQL -> fetch();
		$numeroDeLinhas = $rotinaSQL -> rowCount();

		echo json_encode($resultadosSQL);
	}

	public function post_inserir($data) {

		$IdUniq = api_ulid();
		$nome = $data->nome;
		$codigo = $data->codigo;
		$preco_atual = $data->valor_atual;
		$preco_velho = $data->valor_velho;
		$preco_custo = $data->valor_custo;
		$descricao = $data->descricao;
		$aplicacao = $data->aplicacao;
		$codigo_barras = $data->codigo_barras;
		$estoque = $data->estoque;
		$quantidade_minima = $data->quantidade_minima;
		$peso = $data->peso;
		$ipi = $data->ipi;
		$icms = $data->icms;

		$comandoSQL = 'INSERT INTO sis_produto (uuid_produto, nome, precoatual, precovelho, precocusto, descricao, aplicacao, codbarras, peso, ipi, icms, codigo, datacad)
		VALUES (:uniqid, :nome, :preco_atual, :preco_velho, :preco_custo, :descricao, :aplicacao, :codigo_barras, :peso, :ipi, :icms, :codigo, NOW())';

		$rotinaSQL = DB::prepare($comandoSQL);
		$rotinaSQL -> bindParam('uniqid', $IdUniq);
		$rotinaSQL -> bindParam('nome', $nome);
		$rotinaSQL -> bindParam('preco_atual', $preco_atual);
		$rotinaSQL -> bindParam('preco_velho', $preco_velho);
		$rotinaSQL -> bindParam('preco_custo', $preco_custo);
		$rotinaSQL -> bindParam('descricao', $descricao);
		$rotinaSQL -> bindParam('aplicacao', $aplicacao);
		$rotinaSQL -> bindParam('codigo_barras', $codigo_barras);
		$rotinaSQL -> bindParam('peso', $peso);
		$rotinaSQL -> bindParam('ipi', $ipi);
		$rotinaSQL -> bindParam('icms', $icms);
		$rotinaSQL -> bindParam('codigo', $codigo);
		$rotinaSQL -> execute();
		$numeroDeLinhas = $rotinaSQL -> rowCount();

		if ($numeroDeLinhas > 0) {
			$comandoSQL = 'SELECT id FROM sis_produto WHERE uuid_produto = :uuid';
			$rotinaSQL = DB::prepare($comandoSQL);
			$rotinaSQL -> bindParam('uuid', $IdUniq);
			$rotinaSQL -> execute();
			$resultadosSQL = $rotinaSQL -> fetch();
			$numeroDeLinhas = $rotinaSQL -> rowCount();

			$comandoSQL = 'INSERT INTO sis_estoque (idprod, estoque, qtdmin)
			VALUES (:id, :estoque, :quantidade_minima)';

			$rotinaSQL = DB::prepare($comandoSQL);
			$rotinaSQL -> bindParam('id', $resultadosSQL->id);
			$rotinaSQL -> bindParam('estoque', $estoque);
			$rotinaSQL -> bindParam('quantidade_minima', $quantidade_minima);
			$rotinaSQL -> execute();
			$numeroDeLinhas = $rotinaSQL -> rowCount();

			echo json_encode(array('status' => 'sucesso', 'mensagem' => 'Produto inserido com sucesso', 'dados' => $data));
		}
	}

	public function put_quantidade($data) {

		$uuid = $data->uuid;
		$estoque = $data->estoque;

		$comandoSQL = 'UPDATE sis_estoque
		JOIN sis_produto ON sis_produto.id = sis_estoque.idprod
		SET sis_estoque.estoque = :estoque
		WHERE sis_produto.uuid_produto = :uuid';
		$rotinaSQL = DB::prepare($comandoSQL);
		$rotinaSQL -> bindParam('uuid', $uuid);
		$rotinaSQL -> bindParam('estoque', $estoque);
		$rotinaSQL -> execute();
		$numeroDeLinhas = $rotinaSQL -> rowCount();

		if ($numeroDeLinhas > 0) {
			echo json_encode(array('status' => 'sucesso', 'mensagem' => 'Estoque atualizado com sucesso'));
		} else {
			echo json_encode(array('status' => 'erro', 'mensagem' => 'Produto não encontrado'));
		}
	}

	public function delete_id($valor) {
		
		$comandoSQL= "DELETE sis_produto, sis_estoque
		FROM sis_produto
		JOIN sis_estoque ON sis_produto.id = sis_estoque.idprod
		WHERE sis_produto.uuid_produto = :uuid;";
		$rotinaSQL = DB::prepare($comandoSQL);
		$rotinaSQL -> bindParam('uuid', $valor);
		$rotinaSQL -> execute();
		$numeroDeLinhas = $rotinaSQL -> rowCount();

		if ($numeroDeLinhas > 0) {
			echo json_encode(array('status' => 'sucesso', 'mensagem' => 'Produto deletado com sucesso'));
		} else {
			echo json_encode(array('status' => 'erro', 'mensagem' => 'Produto não encontrado'));
		}
	}

}
