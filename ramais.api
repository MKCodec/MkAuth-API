<?php

class ramais {

	public function parametros($valor) {
		parse_str($valor, $saida);
		$pagina = isset($saida['pagina']) ? intval($saida['pagina']) : 1;
		$limite = isset($saida['limite']) ? intval($saida['limite']) : 500;
		$PaginaP = ($pagina == 0 ) ? 1 : $pagina;
		$padrao = ($PaginaP - 1) * $limite;
		return array('pagina' => $PaginaP, 'limite' => $limite, 'padrao' => $padrao);
	}

	public function get_listagem() {

		$comandoSQL = 'SELECT id, nasname, shortname, community, description
		FROM nas';
		$rotinaSQL = DB::prepare($comandoSQL);
		$rotinaSQL -> execute();
		$resultadosSQL = $rotinaSQL -> fetchAll();
		$numeroDeLinhas = $rotinaSQL -> rowCount();

		echo json_encode(array('planos' => $resultadosSQL));

	}

	public function get_listar($valor) {
		$parametros = $this->parametros($valor);

		$countSQL = 'SELECT COUNT(*) AS total FROM nas';
		$rotinaCount = DB::prepare($countSQL);
		$rotinaCount -> execute();
		$resultadosCount = $rotinaCount -> fetch();
		$total = intval($resultadosCount->total);
		$totalPaginas = ceil($total / $parametros['limite']);

		$comandoSQL = 'SELECT id, nasname, shortname, community, description
		FROM nas
		ORDER BY shortname LIMIT :padrao, :limite';

		$rotinaSQL = DB::prepare($comandoSQL);
		$rotinaSQL -> bindParam('padrao', $parametros['padrao'], PDO::PARAM_INT);
		$rotinaSQL -> bindParam('limite', $parametros['limite'], PDO::PARAM_INT);
		$rotinaSQL -> execute();
		$resultadosSQL = $rotinaSQL -> fetchAll();
		$numeroDeLinhas = $rotinaSQL -> rowCount();

		$ConsultaLimite = ($parametros['pagina'] == $totalPaginas) ? $numeroDeLinhas : $parametros['limite'];

		if ($parametros['padrao'] >= $total) {
			echo json_encode(array('mensagem' => 'Pagina atual acima do limite de paginas'));
		} else {
			echo json_encode(array('total_registros' => $total, 'consulta_atual' => $ConsultaLimite, 'pagina_atual' => $parametros['pagina'], 'total_paginas' => $totalPaginas, 'planos' => $resultadosSQL));
		}

	}
	
	public function get_show($valor) {

		$comandoSQL = 'SELECT *
		FROM nas 
		WHERE shortname = :valor OR id = :valor
		LIMIT 1';
		$rotinaSQL = DB::prepare($comandoSQL);
		$rotinaSQL -> bindParam('valor', $valor);
		$rotinaSQL -> execute();
		$resultadosSQL = $rotinaSQL -> fetch();
		$numeroDeLinhas = $rotinaSQL -> rowCount();

		echo json_encode($resultadosSQL);

	}

	public function post_inserir($data) {

		$nome = $data->nome;
		$ip = $data->ip;
		$tipo = $data->tipo;
		$senha = $data->senha;
		$cliente = $data->cliente;
		$mega = $data->mega;
		$ip_fallback = $data->ip_fallback;
		$secret = $data->secret;
		$community = $data->community;
		$id_placa = $data->id_placa;
		$ssh_ativo = $data->ssh_ativo;
		$ssh_porta = $data->ssh_porta;
		$ftp_ativo = $data->ftp_ativo;
		$cep = $data->cep;
		$endereco = $data->endereco;
		$numero = $data->numero;
		$bairro = $data->bairro;
		$complemento = $data->complemento;
		$cidade = $data->cidade;
		$estado = $data->estado;
		$codigo_ibge = $data->codigo_ibge;
		$coordenadas = $data->coordenadas;

		$comandoSQL = "INSERT INTO nas
		(nasname, shortname, type, secret, community, tipo, maxclientes, sshativo, portassh, senha, ftpativo, idplaca, mb_instalados, ipfall, cep, endereco, numero, bairro, complemento, cidade, estado, cidade_ibge, coordenadas)
		VALUES
		(:nasname, :shortname, 'other', :secret, :community, :tipo, :maxclientes, :sshativo, :portassh, :senha, :ftpativo, :idplaca, :mb_instalados, :ipfall, :cep, :endereco, :numero, :bairro, :complemento, :cidade, :estado, :cidade_ibge, :coordenadas)";

		$rotinaSQL = DB::prepare($comandoSQL);
		$rotinaSQL -> bindParam('nasname', $ip);
		$rotinaSQL -> bindParam('shortname', $nome);
		$rotinaSQL -> bindParam('secret', $secret);
		$rotinaSQL -> bindParam('community', $community);
		$rotinaSQL -> bindParam('tipo', $tipo);
		$rotinaSQL -> bindParam('maxclientes', $cliente);
		$rotinaSQL -> bindParam('sshativo', $ssh_ativo);
		$rotinaSQL -> bindParam('portassh', $ssh_porta);
		$rotinaSQL -> bindParam('senha', $senha);
		$rotinaSQL -> bindParam('ftpativo', $ftp_ativo);
		$rotinaSQL -> bindParam('idplaca', $id_placa);
		$rotinaSQL -> bindParam('mb_instalados', $mega);
		$rotinaSQL -> bindParam('ipfall', $ip_fallback);
		$rotinaSQL -> bindParam('cep', $cep);
		$rotinaSQL -> bindParam('endereco', $endereco);
		$rotinaSQL -> bindParam('numero', $numero);
		$rotinaSQL -> bindParam('bairro', $bairro);
		$rotinaSQL -> bindParam('complemento', $complemento);
		$rotinaSQL -> bindParam('cidade', $cidade);
		$rotinaSQL -> bindParam('estado', $estado);
		$rotinaSQL -> bindParam('cidade_ibge', $codigo_ibge);
		$rotinaSQL -> bindParam('coordenadas', $coordenadas);
		$rotinaSQL -> execute();
		$numeroDeLinhas = $rotinaSQL -> rowCount();

		echo json_encode(array('status' => 'sucesso', 'mensagem' => 'Registro inserido com sucesso', 'dados' => $data));

	}

	public function put_editar($data){

		$nome = $data->nome;
		$ip = $data->ip;
		$tipo = $data->tipo;
		$senha = $data->senha;
		$cliente = $data->cliente;
		$mega = $data->mega;
		$ip_fallback = $data->ip_fallback;
		$secret = $data->secret;
		$community = $data->community;
		$id_placa = $data->id_placa;
		$ssh_ativo = $data->ssh_ativo;
		$ssh_porta = $data->ssh_porta;
		$ftp_ativo = $data->ftp_ativo;
		$cep = $data->cep;
		$endereco = $data->endereco;
		$numero = $data->numero;
		$bairro = $data->bairro;
		$complemento = $data->complemento;
		$cidade = $data->cidade;
		$estado = $data->estado;
		$codigo_ibge = $data->codigo_ibge;
		$coordenadas = $data->coordenadas;
		$id = $data->id;

		$comandoSQL = "UPDATE nas
		SET nasname = :nasname, shortname = :shortname, type = 'other', secret = :secret, community = :community, tipo = :tipo, maxclientes = :maxclientes, sshativo = :sshativo, portassh = :portassh, senha = :senha, ftpativo = :ftpativo, idplaca = :idplaca, mb_instalados = :mb_instalados, ipfall = :ipfall, cep = :cep, endereco = :endereco, numero = :numero, bairro = :bairro, complemento = :complemento, cidade = :cidade, estado = :estado, cidade_ibge = :cidade_ibge, coordenadas = :coordenadas
		WHERE id = :id";

		$rotinaSQL = DB::prepare($comandoSQL);
		$rotinaSQL -> bindParam('nasname', $ip);
		$rotinaSQL -> bindParam('shortname', $nome);
		$rotinaSQL -> bindParam('secret', $secret);
		$rotinaSQL -> bindParam('community', $community);
		$rotinaSQL -> bindParam('tipo', $tipo);
		$rotinaSQL -> bindParam('maxclientes', $cliente);
		$rotinaSQL -> bindParam('sshativo', $ssh_ativo);
		$rotinaSQL -> bindParam('portassh', $ssh_porta);
		$rotinaSQL -> bindParam('senha', $senha);
		$rotinaSQL -> bindParam('ftpativo', $ftp_ativo);
		$rotinaSQL -> bindParam('idplaca', $id_placa);
		$rotinaSQL -> bindParam('mb_instalados', $mega);
		$rotinaSQL -> bindParam('ipfall', $ip_fallback);
		$rotinaSQL -> bindParam('cep', $cep);
		$rotinaSQL -> bindParam('endereco', $endereco);
		$rotinaSQL -> bindParam('numero', $numero);
		$rotinaSQL -> bindParam('bairro', $bairro);
		$rotinaSQL -> bindParam('complemento', $complemento);
		$rotinaSQL -> bindParam('cidade', $cidade);
		$rotinaSQL -> bindParam('estado', $estado);
		$rotinaSQL -> bindParam('cidade_ibge', $codigo_ibge);
		$rotinaSQL -> bindParam('coordenadas', $coordenadas);
		$rotinaSQL -> bindParam('id', $id);
		$rotinaSQL -> execute();
		$numeroDeLinhas = $rotinaSQL -> rowCount();
		
		if($numeroDeLinhas > 0){
			echo json_encode(array('status' => 'sucesso', 'mensagem' => 'Registro editado com sucesso', 'dados' => $data));
		} else {
			echo json_encode(array('status' => 'erro', 'mensagem' => 'Registro não encontrado'));
		}
		
	}

	public function delete_id($key) {

		$comandoSQL = 'DELETE FROM nas
		WHERE id = :id';
		$rotinaSQL = DB::prepare($comandoSQL);
		$rotinaSQL -> bindParam('id', $key);
		$rotinaSQL -> execute();
		$numeroDeLinhas = $rotinaSQL -> rowCount();
		
		if ($numeroDeLinhas > 0) {
			echo json_encode(array('status' => 'sucesso', 'mensagem' => 'Registro excluido com sucesso'));
		} else {
			echo json_encode(array('status' => 'erro', 'mensagem' => 'Registro não encontrado'));
		}

	}

}