<?php

class caixa {

	public function parametros($valor) {
		parse_str($valor, $saida);
		$pagina = isset($saida['pagina']) ? intval($saida['pagina']) : 1;
		$limite = isset($saida['limite']) ? intval($saida['limite']) : 500;
		$PaginaP = ($pagina == 0 ) ? 1 : $pagina;
		$padrao = ($PaginaP - 1) * $limite;
		return array('pagina' => $PaginaP, 'limite' => $limite, 'padrao' => $padrao);
	}

	public function get_listagem() {

		$comandoSQL = 'SELECT uuid_caixa AS uuid, historico
		FROM sis_caixa';
		$rotinaSQL = DB::prepare($comandoSQL);
		$rotinaSQL -> execute();
		$resultadosSQL = $rotinaSQL -> fetchAll();
		$numeroDeLinhas = $rotinaSQL -> rowCount();

		echo json_encode(array('caixa' => $resultadosSQL));

	}

	public function get_listar($valor) {
		$parametros = $this->parametros($valor);

		$countSQL = 'SELECT COUNT(*) AS total FROM sis_caixa';
		$rotinaCount = DB::prepare($countSQL);
		$rotinaCount -> execute();
		$resultadosCount = $rotinaCount -> fetch();
		$total = intval($resultadosCount->total);
		$totalPaginas = ceil($total / $parametros['limite']);

		$comandoSQL = 'SELECT uuid_caixa AS uuid, historico, entrada, saida, data, tipomov, id
		FROM sis_caixa
		ORDER BY data LIMIT :padrao, :limite';

		$rotinaSQL = DB::prepare($comandoSQL);
		$rotinaSQL -> bindParam('padrao', $parametros['padrao'], PDO::PARAM_INT);
		$rotinaSQL -> bindParam('limite', $parametros['limite'], PDO::PARAM_INT);
		$rotinaSQL -> execute();
		$resultadosSQL = $rotinaSQL -> fetchAll();
		$numeroDeLinhas = $rotinaSQL -> rowCount();

		$ConsultaLimite = ($parametros['pagina'] == $totalPaginas) ? $numeroDeLinhas : $parametros['limite'];

		if ($parametros['padrao'] >= $total) {
			echo json_encode(array('mensagem' => 'Pagina atual acima do limite de paginas'));
		} else {
			echo json_encode(array('total_registros' => $total, 'consulta_atual' => $ConsultaLimite, 'pagina_atual' => $parametros['pagina'], 'total_paginas' => $totalPaginas, 'caixa' => $resultadosSQL));
		}
	}

	public function get_show($valor) {

		$comandoSQL = 'SELECT *
		FROM sis_caixa
		WHERE uuid_caixa = :uuid
		LIMIT 1';
		$rotinaSQL = DB::prepare($comandoSQL);
		$rotinaSQL -> bindParam('uuid', $valor);
		$rotinaSQL -> execute();
		$resultadosSQL = $rotinaSQL -> fetch();
		$numeroDeLinhas = $rotinaSQL -> rowCount();

		echo json_encode($resultadosSQL);

	}

	public function post_inserir($data) {

		$historico = $data->historico;
		$tipo = $data->tipo;
		$valor = $data->valor;

		$entrada = ($tipo == 'entrada') ? $valor : '0.00';
		$saida = ($tipo == 'saida') ? $valor : '0.00';

		$comandoSQL = "INSERT INTO sis_caixa (uuid_caixa, data, usuario, complemento, historico, entrada, saida, tipomov)
		VALUES (uuid(), now(), 'API', 'Inserido via API', :historico, :entrada, :saida, 'man')";
		$rotinaSQL = DB::prepare($comandoSQL);
		$rotinaSQL -> bindParam('historico', $historico);
		$rotinaSQL -> bindParam('entrada', $entrada);
		$rotinaSQL -> bindParam('saida', $saida);
		$rotinaSQL -> execute();
		$numeroDeLinhas = $rotinaSQL -> rowCount();

		echo json_encode(array('status' => 'sucesso', 'mensagem' => 'Movimento no caixa inserido com sucesso', 'dados' => $data));
	}

	public function put_editar($data) {

		$tipo = $data->tipo;
		$valor = $data->valor;
		$historico = $data->historico;
		$uuid = $data->uuid;

		$entrada = ($tipo == 'entrada') ? $valor : '0.00';
		$saida = ($tipo == 'saida') ? $valor : '0.00';

		$comandoSQL = "UPDATE sis_caixa SET historico = :historico, entrada = :entrada, saida = :saida, usuario = 'API',
		complemento = 'Editado via API'
		WHERE uuid_caixa = :uuid
		LIMIT 1";
		$rotinaSQL = DB::prepare($comandoSQL);
		$rotinaSQL -> bindParam('historico', $historico);
		$rotinaSQL -> bindParam('entrada', $entrada);
		$rotinaSQL -> bindParam('saida', $saida);
		$rotinaSQL -> bindParam('uuid', $uuid);
		$rotinaSQL -> execute();

		echo json_encode(array('status' => 'sucesso', 'mensagem' => 'Movimento no caixa editado com sucesso', 'dados' => $data));
	}

	public function delete_id($key) {

		$comandoSQL = 'DELETE FROM sis_caixa
		WHERE uuid_caixa = :uuid';
		$rotinaSQL = DB::prepare($comandoSQL);
		$rotinaSQL -> bindParam('uuid', $key);
		$rotinaSQL -> execute();
		$numeroDeLinhas = $rotinaSQL -> rowCount();
		
		if($numeroDeLinhas > 0){
			echo json_encode(array('status' => 'sucesso', 'mensagem' => 'Registro excluido com sucesso'));
		}else{
			echo json_encode(array('status' => 'erro', 'mensagem' => 'Registro n√£o encontrado'));
		}

	}

}
