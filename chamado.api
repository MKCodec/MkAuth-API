<?php

class chamado {

	public function numChamado() {

		$n = mt_rand(1, 99);
		$dataHora = date('dmyHis');
		return "$dataHora$n";

	}

	public function parametros($valor) {
		parse_str($valor, $saida);
		$pagina = isset($saida['pagina']) ? intval($saida['pagina']) : 1;
		$limite = isset($saida['limite']) ? intval($saida['limite']) : 500;
		$PaginaP = ($pagina == 0 ) ? 1 : $pagina;
		$padrao = ($PaginaP - 1) * $limite;
		return array('pagina' => $PaginaP, 'limite' => $limite, 'padrao' => $padrao);
	}

	public function get_listagem() {

		$comandoSQL = 'SELECT uuid_suporte AS uuid, id, abertura, login, prioridade, chamado, status
		FROM sis_suporte';
		$rotinaSQL = DB::prepare($comandoSQL);
		$rotinaSQL -> execute();
		$resultadosSQL = $rotinaSQL -> fetchAll();
		$numeroDeLinhas = $rotinaSQL -> rowCount();
		
		echo json_encode(array('chamados' => $resultadosSQL));
		
	}

	public function get_listar($valor) {
		$parametros = $this->parametros($valor);

		$countSQL = 'SELECT COUNT(*) AS total FROM sis_suporte';
		$rotinaCount = DB::prepare($countSQL);
		$rotinaCount -> execute();
		$resultadosCount = $rotinaCount -> fetch();
		$total = intval($resultadosCount->total);
		$totalPaginas = ceil($total / $parametros['limite']);

		$comandoSQL = 'SELECT uuid_suporte AS uuid, id, abertura, login, prioridade, chamado, status, assunto
		FROM sis_suporte
		ORDER BY id LIMIT :padrao, :limite';

		$rotinaSQL = DB::prepare($comandoSQL);
		$rotinaSQL -> bindParam('padrao', $parametros['padrao'], PDO::PARAM_INT);
		$rotinaSQL -> bindParam('limite', $parametros['limite'], PDO::PARAM_INT);
		$rotinaSQL -> execute();
		$resultadosSQL = $rotinaSQL -> fetchAll();
		$numeroDeLinhas = $rotinaSQL -> rowCount();

		$ConsultaLimite = ($parametros['pagina'] == $totalPaginas) ? $numeroDeLinhas : $parametros['limite'];

		if ($parametros['padrao'] >= $total) {
			echo json_encode(array('mensagem' => 'Pagina atual acima do limite de paginas'));
		} else {
			echo json_encode(array('total_registros' => $total , 'consulta_atual' => $ConsultaLimite, 'pagina_atual' => $parametros['pagina'], 'total_paginas' => $totalPaginas, 'chamados' => $resultadosSQL));
		}
		
	}

	public function get_show($valor) {

		$comandoSQL = 'SELECT *
		FROM sis_suporte
		WHERE chamado = :chamado OR uuid_suporte = :chamado
		LIMIT 1';
		$rotinaSQL = DB::prepare($comandoSQL);
		$rotinaSQL -> bindParam('chamado', $valor);
		$rotinaSQL -> execute();
		$resultadosSQL = $rotinaSQL -> fetch();
		$numeroDeLinhas = $rotinaSQL -> rowCount();
		
		echo json_encode($resultadosSQL);
		
	}

	public function get_reabrir($valor) {
	
		$comandoSQL = "UPDATE sis_suporte
		SET status = 'aberto', fechamento = null
		WHERE uuid_suporte = :chamado OR chamado = :chamado";
		$rotinaSQL = DB::prepare($comandoSQL);
		$rotinaSQL -> bindParam('chamado', $valor);
		$rotinaSQL -> execute();
		$numeroDeLinhas = $rotinaSQL -> rowCount();
	
		if($numeroDeLinhas > 0){
			echo json_encode(array('status' => 'sucesso', 'mensagem' => 'Chamado reaberto com sucesso'));
		} else {
			echo json_encode(array('status' => 'erro', 'mensagem' => 'Chamado n達o encontrado'));
		}
	
	}

	public function post_inserir($data) {

		$gerarChamado = $this->numChamado();
		$login = $data->login;
		$nome = $data->nome;
		$email = $data->email;
		$assunto = $data->assunto;
		$prioridade = $data->prioridade;

		$comandoSQL = "INSERT INTO sis_suporte (uuid_suporte, abertura, login, nome, email, assunto, prioridade, status, atendente, visita, chamado)
		VALUES (uuid(), now(), :login, :nome, :email, :assunto, :prioridade, 'aberto', 'API', DATE_ADD(DATE(NOW()), INTERVAL 5 DAY), :chamado);
		INSERT INTO sis_msg (chamado, atendente, login) 
		VALUES (:chamado, 'API', :login);";

		$rotinaSQL = DB::prepare($comandoSQL);
		$rotinaSQL -> bindParam('login', $login);
		$rotinaSQL -> bindParam('nome', $nome);
		$rotinaSQL -> bindParam('email', $email);
		$rotinaSQL -> bindParam('assunto', $assunto);
		$rotinaSQL -> bindParam('prioridade', $prioridade);
		$rotinaSQL -> bindParam('chamado', $gerarChamado);
		$rotinaSQL -> execute();

		echo json_encode(array('status' => 'sucesso', 'mensagem' => 'Chamado criado com sucesso', 'chamado' => $gerarChamado, 'dados' => $data));

	}

	public function put_editar($data) {
		
		$assunto = $data->assunto;
		$prioridade = $data->prioridade;
		$chamado = $data->chamado;
		
		$comandoSQL = "UPDATE sis_suporte SET assunto = :assunto, prioridade = :prioridade, atendente = 'API'
		WHERE uuid_suporte = :chamado OR chamado = :chamado";

		$rotinaSQL = DB::prepare($comandoSQL);
		$rotinaSQL -> bindParam('assunto', $assunto);
		$rotinaSQL -> bindParam('prioridade', $prioridade);
		$rotinaSQL -> bindParam('chamado', $chamado);
		$rotinaSQL -> execute();
		$numeroDeLinhas = $rotinaSQL -> rowCount();

		if($numeroDeLinhas > 0){
			echo json_encode(array('status' => 'sucesso', 'mensagem' => 'Chamado editado com sucesso', 'dados' => $data));
		} else {
			echo json_encode(array('status' => 'erro', 'mensagem' => 'Chamado n達o encontrado'));
		}

	}

	public function put_fechar($data) {

		$motivo = $data->motivo;
		$chamado = $data->chamado;

		$comandoSQL = "UPDATE sis_suporte
		SET status = 'fechado', fechamento = now(), motivo_fechar = :motivo
		WHERE uuid_suporte = :chamado OR chamado = :chamado";
		$rotinaSQL = DB::prepare($comandoSQL);
		$rotinaSQL -> bindParam('motivo', $motivo);
		$rotinaSQL -> bindParam('chamado', $chamado);
		$rotinaSQL -> execute();
		$numeroDeLinhas = $rotinaSQL -> rowCount();

		if($numeroDeLinhas > 0){
			echo json_encode(array('status' => 'sucesso', 'mensagem' => 'Chamado fechado com sucesso', 'dados' => $data));
		} else {
			echo json_encode(array('status' => 'erro', 'mensagem' => 'Chamado n達o encontrado'));
		}

	}

	public function delete_id($key) {

		$comandoSQL = 'DELETE FROM sis_suporte
		WHERE chamado = :chamado;
		DELETE FROM sis_msg
		WHERE chamado = :chamado;';
		$rotinaSQL = DB::prepare($comandoSQL);
		$rotinaSQL -> bindParam('chamado', $key);
		$rotinaSQL -> execute();
		$numeroDeLinhas = $rotinaSQL -> rowCount();

		if ($numeroDeLinhas > 0) {
			echo json_encode(array('status' => 'sucesso', 'mensagem' => 'Registro excluido com sucesso'));
		} else {
			echo json_encode(array('status' => 'erro', 'mensagem' => 'Registro n達o encontrado'));
		}
	}

}
